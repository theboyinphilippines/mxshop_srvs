package main

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"os"
	"regexp"
)

// 使用ast语法树来自动获取注释，生成文件
// 使用buffer将数据缓冲写入
var buf bytes.Buffer

func main() {
	fileName := "/Users/the/golandProjects/mxshop_srvs/generate/code/user.go"
	//把注释解析到ast语法树
	f, err := parser.ParseFile(token.NewFileSet(), fileName, nil, parser.ParseComments)
	if err != nil {
		panic(any(err))
	}
	fmt.Fprint(&buf, "// CODE GENERATED BY codegen,DO NOT EDIT")
	fmt.Fprint(&buf, "\n")
	fmt.Fprint(&buf, "package code")
	fmt.Fprint(&buf, "\n")
	fmt.Fprint(&buf, "func init() {\n")
	//提取到变量名及其注释
	genDecl(f.Decls[0].(*ast.GenDecl))
	fmt.Fprint(&buf, "}\n")
	data := []byte(buf.String())
	err = os.WriteFile("/Users/the/golandProjects/mxshop_srvs/generate/code/code_gererated.go", data, 0600)
	if err != nil {
		panic(any(err))
	}

}

func genDecl(gDecl *ast.GenDecl) {
	for _, s := range gDecl.Specs {
		v := s.(*ast.ValueSpec)
		for _, name := range v.Names {
			var comment string
			// 这里提取的是 /**/中的注释
			if v.Doc != nil && v.Doc.Text() != "" {
				comment = v.Doc.Text()
			} else if c := v.Comment; c != nil && len(c.List) == 1 {
				comment = c.Text()
			}

			//提取到变量名和注释后，用正则表达式从注释中提取http code和msg信息
			httpCode, msg := ParseCommet(comment)
			fmt.Fprintf(&buf, "\tregister(%s, %s, \"%s\")\n", name.Name, httpCode, msg)
			fmt.Println(name.Name, httpCode, msg)
		}

	}
}

func ParseCommet(comment string) (httpCode string, msg string) {
	//reg := regexp.MustCompile(`\w\s*-\s*(\d{3})\s*:\s*([A-Z].*)\s*\.\n*`)
	reg := regexp.MustCompile(`([A-Za-z]+)\s*-\s*(\d+)\s*:\s*(.+)`)
	if !reg.MatchString(comment) {
		return "500", "Internal server error"
	}
	groups := reg.FindStringSubmatch(comment)
	if len(groups) < 4 {
		return "500", "Internal server error"
	}
	return groups[2], groups[3]
}
